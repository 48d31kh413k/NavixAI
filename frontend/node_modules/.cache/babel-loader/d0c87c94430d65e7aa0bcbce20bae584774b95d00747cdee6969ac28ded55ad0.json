{"ast":null,"code":"var _jsxFileName = \"/Users/bm/dev/projects/new-navix/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Dashboard from './components/Dashboard';\nimport Settings from './components/Settings';\nimport Sidebar from './components/Sidebar';\nimport UserHistory from './components/UserHistory';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [appSettings, setAppSettings] = useState({\n    units: {\n      temperature: 'Celsius (°C)',\n      distance: 'Kilometers (km)'\n    },\n    activities: {\n      outdoorAdventure: true,\n      indoorRelaxation: true,\n      culturalExploration: false,\n      culinaryDelights: true\n    },\n    notifications: {\n      weatherAlerts: true,\n      newRecommendations: true,\n      dailyDigest: false\n    },\n    privacy: {\n      shareData: false,\n      locationTracking: true\n    }\n  });\n\n  // Load settings from localStorage on app start\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('navix_app_settings');\n    if (savedSettings) {\n      try {\n        const parsedSettings = JSON.parse(savedSettings);\n        setAppSettings(parsedSettings);\n      } catch (error) {\n        console.error('Error loading app settings:', error);\n      }\n    }\n  }, []);\n\n  // Save settings to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('navix_app_settings', JSON.stringify(appSettings));\n  }, [appSettings]);\n  const updateAppSettings = newSettings => {\n    setAppSettings(prev => ({\n      ...prev,\n      ...newSettings\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-layout\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-content\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Dashboard, {\n              appSettings: appSettings\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/preferences\",\n            element: /*#__PURE__*/_jsxDEV(Settings, {\n              appSettings: appSettings,\n              updateAppSettings: updateAppSettings\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 61\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/history\",\n            element: /*#__PURE__*/_jsxDEV(UserHistory, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"dAE4BwXQRU4HvEG/tb5IADPtNTo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Route","Routes","Dashboard","Settings","Sidebar","UserHistory","jsxDEV","_jsxDEV","App","_s","appSettings","setAppSettings","units","temperature","distance","activities","outdoorAdventure","indoorRelaxation","culturalExploration","culinaryDelights","notifications","weatherAlerts","newRecommendations","dailyDigest","privacy","shareData","locationTracking","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","error","console","setItem","stringify","updateAppSettings","newSettings","prev","children","className","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/Users/bm/dev/projects/new-navix/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Dashboard from './components/Dashboard';\nimport Settings from './components/Settings';\nimport Sidebar from './components/Sidebar';\nimport UserHistory from './components/UserHistory';\nimport './App.css';\n\nfunction App() {\n    const [appSettings, setAppSettings] = useState({\n        units: {\n            temperature: 'Celsius (°C)',\n            distance: 'Kilometers (km)'\n        },\n        activities: {\n            outdoorAdventure: true,\n            indoorRelaxation: true,\n            culturalExploration: false,\n            culinaryDelights: true\n        },\n        notifications: {\n            weatherAlerts: true,\n            newRecommendations: true,\n            dailyDigest: false\n        },\n        privacy: {\n            shareData: false,\n            locationTracking: true\n        }\n    });\n\n    // Load settings from localStorage on app start\n    useEffect(() => {\n        const savedSettings = localStorage.getItem('navix_app_settings');\n        if (savedSettings) {\n            try {\n                const parsedSettings = JSON.parse(savedSettings);\n                setAppSettings(parsedSettings);\n            } catch (error) {\n                console.error('Error loading app settings:', error);\n            }\n        }\n    }, []);\n\n    // Save settings to localStorage whenever they change\n    useEffect(() => {\n        localStorage.setItem('navix_app_settings', JSON.stringify(appSettings));\n    }, [appSettings]);\n\n    const updateAppSettings = (newSettings) => {\n        setAppSettings(prev => ({\n            ...prev,\n            ...newSettings\n        }));\n    };\n    return (\n        <BrowserRouter>\n            <div className=\"app-layout\">\n                <Sidebar />\n                <main className=\"main-content\">\n                    <Routes>\n                        <Route path=\"/\" element={<Dashboard appSettings={appSettings} />} />\n                        <Route path=\"/preferences\" element={<Settings appSettings={appSettings} updateAppSettings={updateAppSettings} />} />\n                        <Route path=\"/history\" element={<UserHistory />} />\n                    </Routes>\n                </main>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}