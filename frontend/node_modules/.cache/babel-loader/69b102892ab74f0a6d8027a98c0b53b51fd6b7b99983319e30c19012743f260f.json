{"ast":null,"code":"// User preferences storage utility\nclass UserPreferences {\n  constructor() {\n    this.storageKey = 'navix_user_preferences';\n    this.historyKey = 'navix_user_history';\n    this.loadPreferences();\n    this.loadHistory();\n  }\n  loadPreferences() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      this.preferences = stored ? JSON.parse(stored) : {\n        activities: {},\n        // activity_name: score (-5 to +5)\n        places: {},\n        // place_id: { score, name, activity_type, timestamp }\n        locationTypes: {},\n        // location type preferences\n        settings: {\n          enablePersonalization: true,\n          maxHistoryItems: 100\n        }\n      };\n    } catch (error) {\n      console.error('Error loading preferences:', error);\n      this.preferences = {\n        activities: {},\n        places: {},\n        locationTypes: {},\n        settings: {}\n      };\n    }\n  }\n  loadHistory() {\n    try {\n      const stored = localStorage.getItem(this.historyKey);\n      this.history = stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading history:', error);\n      this.history = [];\n    }\n  }\n  savePreferences() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.preferences));\n    } catch (error) {\n      console.error('Error saving preferences:', error);\n    }\n  }\n  saveHistory() {\n    try {\n      // Keep only the most recent items\n      const maxItems = this.preferences.settings.maxHistoryItems || 100;\n      if (this.history.length > maxItems) {\n        this.history = this.history.slice(-maxItems);\n      }\n      localStorage.setItem(this.historyKey, JSON.stringify(this.history));\n    } catch (error) {\n      console.error('Error saving history:', error);\n    }\n  }\n\n  // Activity preference methods\n  likeActivity(activityName) {\n    if (!this.preferences.activities[activityName]) {\n      this.preferences.activities[activityName] = 0;\n    }\n    this.preferences.activities[activityName] = Math.min(5, this.preferences.activities[activityName] + 1);\n    this.savePreferences();\n  }\n  dislikeActivity(activityName) {\n    if (!this.preferences.activities[activityName]) {\n      this.preferences.activities[activityName] = 0;\n    }\n    this.preferences.activities[activityName] = Math.max(-5, this.preferences.activities[activityName] - 1);\n    this.savePreferences();\n  }\n  getActivityScore(activityName) {\n    return this.preferences.activities[activityName] || 0;\n  }\n\n  // Place preference methods\n  likePlace(place, activityType) {\n    var _this$preferences$pla;\n    const placeData = {\n      score: (((_this$preferences$pla = this.preferences.places[place.place_id]) === null || _this$preferences$pla === void 0 ? void 0 : _this$preferences$pla.score) || 0) + 1,\n      name: place.name,\n      activityType: activityType,\n      timestamp: Date.now(),\n      vicinity: place.vicinity,\n      rating: place.rating\n    };\n    this.preferences.places[place.place_id] = placeData;\n    this.likeActivity(activityType); // Also boost activity preference\n    this.addToHistory('like', place, activityType);\n    this.savePreferences();\n  }\n  dislikePlace(place, activityType) {\n    var _this$preferences$pla2;\n    const placeData = {\n      score: (((_this$preferences$pla2 = this.preferences.places[place.place_id]) === null || _this$preferences$pla2 === void 0 ? void 0 : _this$preferences$pla2.score) || 0) - 1,\n      name: place.name,\n      activityType: activityType,\n      timestamp: Date.now(),\n      vicinity: place.vicinity,\n      rating: place.rating\n    };\n    this.preferences.places[place.place_id] = placeData;\n    this.addToHistory('dislike', place, activityType);\n    this.savePreferences();\n  }\n  getPlaceScore(placeId) {\n    var _this$preferences$pla3;\n    return ((_this$preferences$pla3 = this.preferences.places[placeId]) === null || _this$preferences$pla3 === void 0 ? void 0 : _this$preferences$pla3.score) || 0;\n  }\n  removePlacePreference(placeId) {\n    if (this.preferences.places[placeId]) {\n      delete this.preferences.places[placeId];\n      this.savePreferences();\n    }\n  }\n\n  // History methods\n  addToHistory(action, place, activityType) {\n    const historyItem = {\n      id: Date.now(),\n      action: action,\n      // 'like', 'dislike', 'visit'\n      place: {\n        place_id: place.place_id,\n        name: place.name,\n        vicinity: place.vicinity,\n        rating: place.rating,\n        types: place.types || []\n      },\n      activityType: activityType,\n      timestamp: Date.now(),\n      date: new Date().toLocaleDateString()\n    };\n    this.history.unshift(historyItem); // Add to beginning\n    this.saveHistory();\n  }\n  getHistory(limit = 50) {\n    return this.history.slice(0, limit);\n  }\n  getLikedPlaces() {\n    return Object.entries(this.preferences.places).filter(([_, data]) => data.score > 0).map(([placeId, data]) => ({\n      placeId,\n      ...data\n    })).sort((a, b) => b.score - a.score);\n  }\n  getPreferredActivities() {\n    return Object.entries(this.preferences.activities).filter(([_, score]) => score > 0).sort(([_, a], [__, b]) => b - a).map(([activity, score]) => ({\n      activity,\n      score\n    }));\n  }\n\n  // Recommendation methods\n  getPersonalizedActivityScore(activityName) {\n    const baseScore = this.getActivityScore(activityName);\n\n    // Boost score based on related liked places\n    const relatedPlaces = Object.values(this.preferences.places).filter(place => place.activityType === activityName && place.score > 0);\n    const placeBoost = relatedPlaces.length * 0.5;\n    return baseScore + placeBoost;\n  }\n  sortActivitiesByPreference(activities) {\n    if (!this.preferences.settings.enablePersonalization) {\n      return activities;\n    }\n    return activities.sort((a, b) => {\n      const scoreA = this.getPersonalizedActivityScore(a.activity_name);\n      const scoreB = this.getPersonalizedActivityScore(b.activity_name);\n      return scoreB - scoreA;\n    });\n  }\n\n  // Settings\n  updateSettings(newSettings) {\n    this.preferences.settings = {\n      ...this.preferences.settings,\n      ...newSettings\n    };\n    this.savePreferences();\n  }\n  getSettings() {\n    return this.preferences.settings;\n  }\n\n  // Clear data\n  clearHistory() {\n    this.history = [];\n    this.saveHistory();\n  }\n  clearPreferences() {\n    this.preferences = {\n      activities: {},\n      places: {},\n      locationTypes: {},\n      settings: {}\n    };\n    this.savePreferences();\n  }\n\n  // Export/Import for backup\n  exportData() {\n    return {\n      preferences: this.preferences,\n      history: this.history,\n      exportDate: new Date().toISOString()\n    };\n  }\n  importData(data) {\n    try {\n      if (data.preferences) {\n        this.preferences = data.preferences;\n        this.savePreferences();\n      }\n      if (data.history) {\n        this.history = data.history;\n        this.saveHistory();\n      }\n      return true;\n    } catch (error) {\n      console.error('Error importing data:', error);\n      return false;\n    }\n  }\n}\n\n// Create a singleton instance\nconst userPreferences = new UserPreferences();\nexport default userPreferences;","map":{"version":3,"names":["UserPreferences","constructor","storageKey","historyKey","loadPreferences","loadHistory","stored","localStorage","getItem","preferences","JSON","parse","activities","places","locationTypes","settings","enablePersonalization","maxHistoryItems","error","console","history","savePreferences","setItem","stringify","saveHistory","maxItems","length","slice","likeActivity","activityName","Math","min","dislikeActivity","max","getActivityScore","likePlace","place","activityType","_this$preferences$pla","placeData","score","place_id","name","timestamp","Date","now","vicinity","rating","addToHistory","dislikePlace","_this$preferences$pla2","getPlaceScore","placeId","_this$preferences$pla3","removePlacePreference","action","historyItem","id","types","date","toLocaleDateString","unshift","getHistory","limit","getLikedPlaces","Object","entries","filter","_","data","map","sort","a","b","getPreferredActivities","__","activity","getPersonalizedActivityScore","baseScore","relatedPlaces","values","placeBoost","sortActivitiesByPreference","scoreA","activity_name","scoreB","updateSettings","newSettings","getSettings","clearHistory","clearPreferences","exportData","exportDate","toISOString","importData","userPreferences"],"sources":["/Users/bm/dev/projects/new-navix/frontend/src/utils/UserPreferences.js"],"sourcesContent":["// User preferences storage utility\nclass UserPreferences {\n    constructor() {\n        this.storageKey = 'navix_user_preferences';\n        this.historyKey = 'navix_user_history';\n        this.loadPreferences();\n        this.loadHistory();\n    }\n\n    loadPreferences() {\n        try {\n            const stored = localStorage.getItem(this.storageKey);\n            this.preferences = stored ? JSON.parse(stored) : {\n                activities: {}, // activity_name: score (-5 to +5)\n                places: {},     // place_id: { score, name, activity_type, timestamp }\n                locationTypes: {}, // location type preferences\n                settings: {\n                    enablePersonalization: true,\n                    maxHistoryItems: 100\n                }\n            };\n        } catch (error) {\n            console.error('Error loading preferences:', error);\n            this.preferences = { activities: {}, places: {}, locationTypes: {}, settings: {} };\n        }\n    }\n\n    loadHistory() {\n        try {\n            const stored = localStorage.getItem(this.historyKey);\n            this.history = stored ? JSON.parse(stored) : [];\n        } catch (error) {\n            console.error('Error loading history:', error);\n            this.history = [];\n        }\n    }\n\n    savePreferences() {\n        try {\n            localStorage.setItem(this.storageKey, JSON.stringify(this.preferences));\n        } catch (error) {\n            console.error('Error saving preferences:', error);\n        }\n    }\n\n    saveHistory() {\n        try {\n            // Keep only the most recent items\n            const maxItems = this.preferences.settings.maxHistoryItems || 100;\n            if (this.history.length > maxItems) {\n                this.history = this.history.slice(-maxItems);\n            }\n            localStorage.setItem(this.historyKey, JSON.stringify(this.history));\n        } catch (error) {\n            console.error('Error saving history:', error);\n        }\n    }\n\n    // Activity preference methods\n    likeActivity(activityName) {\n        if (!this.preferences.activities[activityName]) {\n            this.preferences.activities[activityName] = 0;\n        }\n        this.preferences.activities[activityName] = Math.min(5, this.preferences.activities[activityName] + 1);\n        this.savePreferences();\n    }\n\n    dislikeActivity(activityName) {\n        if (!this.preferences.activities[activityName]) {\n            this.preferences.activities[activityName] = 0;\n        }\n        this.preferences.activities[activityName] = Math.max(-5, this.preferences.activities[activityName] - 1);\n        this.savePreferences();\n    }\n\n    getActivityScore(activityName) {\n        return this.preferences.activities[activityName] || 0;\n    }\n\n    // Place preference methods\n    likePlace(place, activityType) {\n        const placeData = {\n            score: (this.preferences.places[place.place_id]?.score || 0) + 1,\n            name: place.name,\n            activityType: activityType,\n            timestamp: Date.now(),\n            vicinity: place.vicinity,\n            rating: place.rating\n        };\n        \n        this.preferences.places[place.place_id] = placeData;\n        this.likeActivity(activityType); // Also boost activity preference\n        this.addToHistory('like', place, activityType);\n        this.savePreferences();\n    }\n\n    dislikePlace(place, activityType) {\n        const placeData = {\n            score: (this.preferences.places[place.place_id]?.score || 0) - 1,\n            name: place.name,\n            activityType: activityType,\n            timestamp: Date.now(),\n            vicinity: place.vicinity,\n            rating: place.rating\n        };\n        \n        this.preferences.places[place.place_id] = placeData;\n        this.addToHistory('dislike', place, activityType);\n        this.savePreferences();\n    }\n\n    getPlaceScore(placeId) {\n        return this.preferences.places[placeId]?.score || 0;\n    }\n\n    removePlacePreference(placeId) {\n        if (this.preferences.places[placeId]) {\n            delete this.preferences.places[placeId];\n            this.savePreferences();\n        }\n    }\n\n    // History methods\n    addToHistory(action, place, activityType) {\n        const historyItem = {\n            id: Date.now(),\n            action: action, // 'like', 'dislike', 'visit'\n            place: {\n                place_id: place.place_id,\n                name: place.name,\n                vicinity: place.vicinity,\n                rating: place.rating,\n                types: place.types || []\n            },\n            activityType: activityType,\n            timestamp: Date.now(),\n            date: new Date().toLocaleDateString()\n        };\n\n        this.history.unshift(historyItem); // Add to beginning\n        this.saveHistory();\n    }\n\n    getHistory(limit = 50) {\n        return this.history.slice(0, limit);\n    }\n\n    getLikedPlaces() {\n        return Object.entries(this.preferences.places)\n            .filter(([_, data]) => data.score > 0)\n            .map(([placeId, data]) => ({ placeId, ...data }))\n            .sort((a, b) => b.score - a.score);\n    }\n\n    getPreferredActivities() {\n        return Object.entries(this.preferences.activities)\n            .filter(([_, score]) => score > 0)\n            .sort(([_, a], [__, b]) => b - a)\n            .map(([activity, score]) => ({ activity, score }));\n    }\n\n    // Recommendation methods\n    getPersonalizedActivityScore(activityName) {\n        const baseScore = this.getActivityScore(activityName);\n        \n        // Boost score based on related liked places\n        const relatedPlaces = Object.values(this.preferences.places)\n            .filter(place => place.activityType === activityName && place.score > 0);\n        \n        const placeBoost = relatedPlaces.length * 0.5;\n        \n        return baseScore + placeBoost;\n    }\n\n    sortActivitiesByPreference(activities) {\n        if (!this.preferences.settings.enablePersonalization) {\n            return activities;\n        }\n\n        return activities.sort((a, b) => {\n            const scoreA = this.getPersonalizedActivityScore(a.activity_name);\n            const scoreB = this.getPersonalizedActivityScore(b.activity_name);\n            return scoreB - scoreA;\n        });\n    }\n\n    // Settings\n    updateSettings(newSettings) {\n        this.preferences.settings = { ...this.preferences.settings, ...newSettings };\n        this.savePreferences();\n    }\n\n    getSettings() {\n        return this.preferences.settings;\n    }\n\n    // Clear data\n    clearHistory() {\n        this.history = [];\n        this.saveHistory();\n    }\n\n    clearPreferences() {\n        this.preferences = { activities: {}, places: {}, locationTypes: {}, settings: {} };\n        this.savePreferences();\n    }\n\n    // Export/Import for backup\n    exportData() {\n        return {\n            preferences: this.preferences,\n            history: this.history,\n            exportDate: new Date().toISOString()\n        };\n    }\n\n    importData(data) {\n        try {\n            if (data.preferences) {\n                this.preferences = data.preferences;\n                this.savePreferences();\n            }\n            if (data.history) {\n                this.history = data.history;\n                this.saveHistory();\n            }\n            return true;\n        } catch (error) {\n            console.error('Error importing data:', error);\n            return false;\n        }\n    }\n}\n\n// Create a singleton instance\nconst userPreferences = new UserPreferences();\n\nexport default userPreferences;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}